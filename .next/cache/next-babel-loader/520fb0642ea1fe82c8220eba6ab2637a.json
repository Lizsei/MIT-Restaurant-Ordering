{"ast":null,"code":"var _jsxFileName = \"/Users/elizabethseidel/Documents/CODING/MODULE_31 capstone/next-restaurant-05-master/pages/restaurants/[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport { ApolloProvider, ApolloClient, InMemoryCache, gql, useQuery } from '@apollo/client';\nconst GET_RESTAURANT_BY_ID = gql`\n  query getRestaurantById($id: ID!) {\n    restaurant(id: $id) {\n      id\n      name\n      description\n      image {\n        url\n      }\n      dishes {\n        id\n        name\n        description\n      }\n    }\n  }\n`;\nconst API_URL = process.env.API_URL || 'http://localhost:1337';\n\nconst RestaurantPage = () => {\n  const router = useRouter();\n  const {\n    id\n  } = router.query; // Initialize Apollo Client\n\n  const client = new ApolloClient({\n    uri: `${API_URL}/graphql`,\n    cache: new InMemoryCache()\n  });\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANT_BY_ID, {\n    variables: {\n      id\n    },\n    skip: !id // Skip the query if id is not available yet\n\n  });\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 21\n    }\n  }, \"Error: \", error.message);\n  const restaurant = data.restaurant;\n  return __jsx(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, restaurant.name), __jsx(\"img\", {\n    src: `${API_URL}${restaurant.image.url}`,\n    alt: restaurant.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, restaurant.description), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, restaurant.dishes.map(dish => __jsx(\"li\", {\n    key: dish.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }\n  }, dish.name), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 15\n    }\n  }, dish.description))))));\n};\n\nexport default RestaurantPage;","map":{"version":3,"sources":["/Users/elizabethseidel/Documents/CODING/MODULE_31 capstone/next-restaurant-05-master/pages/restaurants/[id].js"],"names":["useRouter","ApolloProvider","ApolloClient","InMemoryCache","gql","useQuery","GET_RESTAURANT_BY_ID","API_URL","process","env","RestaurantPage","router","id","query","client","uri","cache","loading","error","data","variables","skip","message","restaurant","name","image","url","description","dishes","map","dish"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,cAAT,EAAyBC,YAAzB,EAAuCC,aAAvC,EAAsDC,GAAtD,EAA2DC,QAA3D,QAA2E,gBAA3E;AAEA,MAAMC,oBAAoB,GAAGF,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhBA;AAkBA,MAAMG,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYF,OAAZ,IAAuB,uBAAvC;;AAEA,MAAMG,cAAc,GAAG,MAAM;AAC3B,QAAMC,MAAM,GAAGX,SAAS,EAAxB;AACA,QAAM;AAAEY,IAAAA;AAAF,MAASD,MAAM,CAACE,KAAtB,CAF2B,CAI3B;;AACA,QAAMC,MAAM,GAAG,IAAIZ,YAAJ,CAAiB;AAC9Ba,IAAAA,GAAG,EAAG,GAAER,OAAQ,UADc;AAE9BS,IAAAA,KAAK,EAAE,IAAIb,aAAJ;AAFuB,GAAjB,CAAf;AAKA,QAAM;AAAEc,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2Bd,QAAQ,CAACC,oBAAD,EAAuB;AAC9Dc,IAAAA,SAAS,EAAE;AAAER,MAAAA;AAAF,KADmD;AAE9DS,IAAAA,IAAI,EAAE,CAACT,EAFuD,CAEpD;;AAFoD,GAAvB,CAAzC;AAKA,MAAIK,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAWA,KAAK,CAACI,OAAjB,CAAP;AAEX,QAAMC,UAAU,GAAGJ,IAAI,CAACI,UAAxB;AAEA,SACE,MAAC,cAAD;AAAgB,IAAA,MAAM,EAAET,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKS,UAAU,CAACC,IAAhB,CADF,EAEE;AAAK,IAAA,GAAG,EAAG,GAAEjB,OAAQ,GAAEgB,UAAU,CAACE,KAAX,CAAiBC,GAAI,EAA5C;AAA+C,IAAA,GAAG,EAAEH,UAAU,CAACC,IAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAID,UAAU,CAACI,WAAf,CAHF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,UAAU,CAACK,MAAX,CAAkBC,GAAlB,CAAsBC,IAAI,IACzB;AAAI,IAAA,GAAG,EAAEA,IAAI,CAAClB,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKkB,IAAI,CAACN,IAAV,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIM,IAAI,CAACH,WAAT,CAFF,CADD,CADH,CALF,CADF,CADF;AAkBD,CAtCD;;AAwCA,eAAejB,cAAf","sourcesContent":["import { useRouter } from 'next/router';\nimport { ApolloProvider, ApolloClient, InMemoryCache, gql, useQuery } from '@apollo/client';\n\nconst GET_RESTAURANT_BY_ID = gql`\n  query getRestaurantById($id: ID!) {\n    restaurant(id: $id) {\n      id\n      name\n      description\n      image {\n        url\n      }\n      dishes {\n        id\n        name\n        description\n      }\n    }\n  }\n`;\n\nconst API_URL = process.env.API_URL || 'http://localhost:1337';\n\nconst RestaurantPage = () => {\n  const router = useRouter();\n  const { id } = router.query;\n\n  // Initialize Apollo Client\n  const client = new ApolloClient({\n    uri: `${API_URL}/graphql`,\n    cache: new InMemoryCache(),\n  });\n\n  const { loading, error, data } = useQuery(GET_RESTAURANT_BY_ID, {\n    variables: { id },\n    skip: !id // Skip the query if id is not available yet\n  });\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n\n  const restaurant = data.restaurant;\n\n  return (\n    <ApolloProvider client={client}>\n      <div>\n        <h1>{restaurant.name}</h1>\n        <img src={`${API_URL}${restaurant.image.url}`} alt={restaurant.name} />\n        <p>{restaurant.description}</p>\n\n        <ul>\n          {restaurant.dishes.map(dish => (\n            <li key={dish.id}>\n              <h2>{dish.name}</h2>\n              <p>{dish.description}</p>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </ApolloProvider>\n  );\n};\n\nexport default RestaurantPage;\n"]},"metadata":{},"sourceType":"module"}